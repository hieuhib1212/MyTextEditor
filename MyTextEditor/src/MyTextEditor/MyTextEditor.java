package MyTextEditor;

import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.FlavorEvent;
import java.awt.datatransfer.FlavorListener;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.UndoableEditEvent;
import javax.swing.text.Document;
import javax.swing.undo.CannotRedoException;
import javax.swing.undo.CannotUndoException;
import javax.swing.undo.UndoManager;

/**
 *
 * @author ACER
 */
public class MyTextEditor extends javax.swing.JFrame {

    /**
     * Creates new form MyTextEditor
     */
    UndoManager undo = new UndoManager();

    public MyTextEditor() {
        initComponents();
        tSelectAll.setEnabled(false);
        tUndo.setEnabled(false);
        tRedo.setEnabled(false);
        tCopy.setEnabled(false);
        tCut.setEnabled(false);
        tFind.setEnabled(false);
        String data = null;
        try {
            data = (String) Toolkit.getDefaultToolkit().getSystemClipboard().getData(DataFlavor.stringFlavor);
        } catch (HeadlessException | UnsupportedFlavorException | IOException e) {
        }
        if (data == null) {
            tPaste.setEnabled(false);
        } else {
            tPaste.setEnabled(true);
        }
        Toolkit.getDefaultToolkit().getSystemClipboard().addFlavorListener(new FlavorListener() {
            @Override
            public void flavorsChanged(FlavorEvent e) {
                if (e.toString().equals("")) {
                    tPaste.setEnabled(false);
                } else {
                    tPaste.setEnabled(true);
                }
            }
        });
        textArea.addCaretListener(new CaretListener() {
            @Override
            public void caretUpdate(CaretEvent e) {
                if (textArea.getSelectionEnd() == textArea.getSelectionStart()) {
                    tCut.setEnabled(false);
                    tCopy.setEnabled(false);
                } else {
                    tCut.setEnabled(true);
                    tCopy.setEnabled(true);
                }

                if (undo.canUndo()) {
                    tUndo.setEnabled(true);
                    System.out.println("Can undo");
                } else {
                    tUndo.setEnabled(false);
                    System.out.println("can not undo");
                }
                if (undo.canRedo()) {
                    tRedo.setEnabled(true);
                    System.out.println("true");
                } else {
                    tRedo.setEnabled(false);
                    System.out.println("false");
                }
            }
        });

        Document document = textArea.getDocument();
        document.addUndoableEditListener((UndoableEditEvent e) -> {
            undo.addEdit(e.getEdit());

        });
        document.addDocumentListener(new DocumentListener() {
            private void activate() {
                if (textArea.getText().equals("")) {
                    tSelectAll.setEnabled(false);
                    tFind.setEnabled(false);
                } else {
                    tSelectAll.setEnabled(true);
                    tFind.setEnabled(true);
                }
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                activate();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                activate();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        menuBar = new javax.swing.JMenuBar();
        tFile = new javax.swing.JMenu();
        tNew = new javax.swing.JMenuItem();
        tOpen = new javax.swing.JMenuItem();
        tSave = new javax.swing.JMenuItem();
        tSaveAs = new javax.swing.JMenuItem();
        tExit = new javax.swing.JMenuItem();
        tEdit = new javax.swing.JMenu();
        tSelectAll = new javax.swing.JMenuItem();
        tCut = new javax.swing.JMenuItem();
        tCopy = new javax.swing.JMenuItem();
        tPaste = new javax.swing.JMenuItem();
        tUndo = new javax.swing.JMenuItem();
        tRedo = new javax.swing.JMenuItem();
        tFind = new javax.swing.JMenuItem();
        tReplace = new javax.swing.JMenuItem();
        tChangeFont = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("My Text Editor (MTE)");

        textArea.setColumns(20);
        textArea.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        textArea.setRows(5);
        jScrollPane1.setViewportView(textArea);

        menuBar.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        tFile.setText("File");

        tNew.setText("New");
        tNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tNewActionPerformed(evt);
            }
        });
        tFile.add(tNew);

        tOpen.setText("Open");
        tOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tOpenActionPerformed(evt);
            }
        });
        tFile.add(tOpen);

        tSave.setText("Save");
        tSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tSaveActionPerformed(evt);
            }
        });
        tFile.add(tSave);

        tSaveAs.setText("Save as...");
        tSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tSaveAsActionPerformed(evt);
            }
        });
        tFile.add(tSaveAs);

        tExit.setText("Exit");
        tExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tExitActionPerformed(evt);
            }
        });
        tFile.add(tExit);

        menuBar.add(tFile);

        tEdit.setText("Edit");

        tSelectAll.setText("Select all");
        tSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tSelectAllActionPerformed(evt);
            }
        });
        tEdit.add(tSelectAll);

        tCut.setText("Cut");
        tCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tCutActionPerformed(evt);
            }
        });
        tEdit.add(tCut);

        tCopy.setText("Copy");
        tCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tCopyActionPerformed(evt);
            }
        });
        tEdit.add(tCopy);

        tPaste.setText("Paste");
        tPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tPasteActionPerformed(evt);
            }
        });
        tEdit.add(tPaste);

        tUndo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        tUndo.setText("Undo");
        tUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tUndoActionPerformed(evt);
            }
        });
        tEdit.add(tUndo);

        tRedo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        tRedo.setText("Redo");
        tRedo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tRedoActionPerformed(evt);
            }
        });
        tEdit.add(tRedo);

        tFind.setText("Find");
        tFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tFindActionPerformed(evt);
            }
        });
        tEdit.add(tFind);

        tReplace.setText("Replace");
        tEdit.add(tReplace);

        tChangeFont.setText("Change font");
        tChangeFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tChangeFontActionPerformed(evt);
            }
        });
        tEdit.add(tChangeFont);

        menuBar.add(tEdit);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 728, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tNewActionPerformed
        // TODO add your handling code here:
        textArea.setText("");
    }//GEN-LAST:event_tNewActionPerformed

    private void tOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tOpenActionPerformed
        // TODO add your handling code here:
        JFileChooser file = new JFileChooser();
        int op = file.showOpenDialog(null);
        if (op == JFileChooser.APPROVE_OPTION) {
            File fi = new File(file.getSelectedFile().getAbsolutePath());
            try {
                String text1 = "", text2 = "";
                FileReader fr = new FileReader(fi);
                BufferedReader br = new BufferedReader(fr);
                text2 = br.readLine();
                System.out.println(text2);
                while ((text2 = br.readLine()) != null) {
                    System.out.println(text2);
                    text2 = text2 + "\n" + text1;
                }
                textArea.setText(text2);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(rootPane, e.getMessage());
            }
        }
    }//GEN-LAST:event_tOpenActionPerformed

    private void tSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tSaveAsActionPerformed
        // TODO add your handling code here:
        JFileChooser file = new JFileChooser();
        file.setDialogTitle("Save as");
        int op = file.showSaveDialog(rootPane);
        if (op == JFileChooser.APPROVE_OPTION) {
            File fi = new File(file.getSelectedFile().getAbsolutePath());
            try {
                FileWriter fw = new FileWriter(fi, false);
                BufferedWriter bw = new BufferedWriter(fw);
                bw.write(textArea.getText());
                bw.flush();
                bw.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, e.getMessage());
            }
        }
    }//GEN-LAST:event_tSaveAsActionPerformed

    private void tSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tSaveActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_tSaveActionPerformed

    private void tExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_tExitActionPerformed

    private void tCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tCutActionPerformed
        // TODO add your handling code here:
        textArea.cut();
    }//GEN-LAST:event_tCutActionPerformed

    private void tCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tCopyActionPerformed
        // TODO add your handling code here:
        textArea.copy();
    }//GEN-LAST:event_tCopyActionPerformed

    private void tPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tPasteActionPerformed
        // TODO add your handling code here:
        textArea.paste();
    }//GEN-LAST:event_tPasteActionPerformed

    private void tSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tSelectAllActionPerformed
        // TODO add your handling code here:
        textArea.selectAll();
    }//GEN-LAST:event_tSelectAllActionPerformed

    private void tChangeFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tChangeFontActionPerformed

        FontChooser fc = new FontChooser(textArea);
        Font setFont = fc.returnFont();
        textArea.setFont(setFont);
        System.out.println("println");


    }//GEN-LAST:event_tChangeFontActionPerformed

    private void tUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tUndoActionPerformed
        // TODO add your handling code here:
        try {
            undo.undo();
        } catch (CannotUndoException e) {
            Toolkit.getDefaultToolkit().beep();
        }
    }//GEN-LAST:event_tUndoActionPerformed

    private void tRedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tRedoActionPerformed
        // TODO add your handling code here:
        try {

            undo.redo();
        } catch (CannotRedoException e) {
            Toolkit.getDefaultToolkit().beep();
        }
    }//GEN-LAST:event_tRedoActionPerformed

    private void tFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tFindActionPerformed
        FindText ft = new FindText(textArea);
    }//GEN-LAST:event_tFindActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MyTextEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MyTextEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MyTextEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MyTextEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MyTextEditor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem tChangeFont;
    private javax.swing.JMenuItem tCopy;
    private javax.swing.JMenuItem tCut;
    private javax.swing.JMenu tEdit;
    private javax.swing.JMenuItem tExit;
    private javax.swing.JMenu tFile;
    private javax.swing.JMenuItem tFind;
    private javax.swing.JMenuItem tNew;
    private javax.swing.JMenuItem tOpen;
    private javax.swing.JMenuItem tPaste;
    private javax.swing.JMenuItem tRedo;
    private javax.swing.JMenuItem tReplace;
    private javax.swing.JMenuItem tSave;
    private javax.swing.JMenuItem tSaveAs;
    private javax.swing.JMenuItem tSelectAll;
    private javax.swing.JMenuItem tUndo;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}
