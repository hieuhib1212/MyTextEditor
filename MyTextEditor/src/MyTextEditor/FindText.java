/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MyTextEditor;

import java.awt.Color;
import java.awt.Rectangle;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.JTextPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;

/**
 *
 * @author ACER
 */
public class FindText extends javax.swing.JDialog {

    /**
     * Creates new form FindText
     */
    private static final long serialVersionUID = 1L;
    static JTextArea jTextPane;
    private int findPosn = 0;
    /**
     * the last text searched for
     */
    private String findText = null;
    /**
     * case sensitive find/replace
     */
    private boolean findCase = false;
    /**
     * user must confirm text replacement
     */
    private boolean replaceConfirm = true;
    private JTextField Find_TextField;
    boolean exist = false;
    private boolean modal = true;
    Highlighter.HighlightPainter painter = new DefaultHighlighter.DefaultHighlightPainter(Color.YELLOW);
    JTextArea curr = new JTextArea();

    public FindText(JTextArea textArea) {
        initComponents();
        jTextPane = textArea;
        curr = textArea;
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jButton1.setText("find");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 90, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(42, 42, 42))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(113, 113, 113)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addContainerGap(162, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * * finds next occurrence of text in a string
     *
     * @param find the text to locate in the string
     */
    public void doFindText(String find) {
        int nextPosn = 0;
        if (!find.equals(findText)) // *** new find word 
        {
            findPosn = 0; // *** start from top 
        }
        System.out.println(findPosn);
        nextPosn = nextIndex(jTextPane.getText(), find, findPosn, findCase);
        
        if (nextPosn >= 0) {
            exist = true;
            jTextPane.setSelectionStart(nextPosn); // position cursor at word start 
            jTextPane.setSelectionEnd(nextPosn + find.length());
            findPosn = nextPosn + find.length(); // reset for next search 
            findText = find; // save word & case 
            System.out.println(findPosn);
        } else {
            findPosn = 0; // set to -1 if not found 
            System.out.println(findPosn);
            if(!exist) {
                JOptionPane.showMessageDialog(null, find + " not Found!");
                System.out.println(" not existed");
            }else {
                JOptionPane.showMessageDialog(null, "That was the last match we found");
            }
            
        }
        
    }
    public void doReplaceAll(JTextArea textArea, String find) {
        String look = find;
        String oldText = textArea.getText();
    }

    /**
     * finds and replaces <B>ALL</B> occurrences of text in a string
     *
     * @param find the text to locate in the string
     * @param replace the text to replace the find text with - if the find text
     * exists
     */
    public void doReplaceWords(String find, String replace) {
        int nextPosn = 0;
        StringBuffer str = new StringBuffer();
        findPosn = 0; // *** begin at start of text 
        while (nextPosn >= 0) {
            nextPosn = nextIndex(jTextPane.getText(), find, findPosn, findCase);

            if (nextPosn >= 0) { // if text is found 
                int rtn = JOptionPane.YES_OPTION; // default YES for confirm 
                jTextPane.grabFocus();
                jTextPane.setSelectionStart(nextPosn); // posn cursor at word start 
                jTextPane.setSelectionEnd(nextPosn + find.length()); //select found text 

                if (replaceConfirm) { // user replace confirmation 
                    rtn = JOptionPane.showConfirmDialog(null, "Found: " + find + "\nReplace with: " + replace, "Text Find & Replace", JOptionPane.YES_NO_CANCEL_OPTION);
                }
                // if don't want confirm or selected yes 
                if (!replaceConfirm || rtn == JOptionPane.YES_OPTION) {
                    //  jTextPane.replaceRange( replace, nextPosn, nextPosn + find.length() ); 
                } else if (rtn == javax.swing.JOptionPane.CANCEL_OPTION) {
                    return; // cancelled replace - exit method 
                }
                findPosn = nextPosn + find.length(); // set for next search 
            }
        }
    }


    /**
     * returns next posn of word in text - forward search
     *
     * @return next indexed position of start of found text or -1
     * @param input the string to search
     * @param find the string to find
     * @param start the character position to start the search
     * @param caseSensitive true for case sensitive. false to ignore case
     */
    public int nextIndex(String input, String find, int start, boolean caseSensitive) {
        int textPosn = -1;
        if (input != null && find != null && start < input.length()) {
            if (caseSensitive == true) { // indexOf() returns -1 if not found 
                textPosn = input.indexOf(find, start);
            } else {
                textPosn = input.toLowerCase().indexOf(find.toLowerCase(),
                        start);
            }
        }
        return textPosn;
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        doFindText(jTextField1.getText());
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
